import { DEFAULT_BASE_HREF, DEFAULT_RPC_NETWORK } from "@/app/config/blink";
import { sendEmail } from "@/app/utils/emailUtils";
import { getFeedbackQueryParams } from "@/app/utils/feedbackUtils";
import { ActionGetResponse, ActionPostRequest, ActionPostResponse, ACTIONS_CORS_HEADERS, createPostResponse } from "@solana/actions";
import { Connection, LAMPORTS_PER_SOL, PublicKey, SystemProgram, Transaction } from "@solana/web3.js";

export const GET = async (request: Request) => {
    const requestUrl = new URL(request.url);
    const baseHref = new URL(
        `${DEFAULT_BASE_HREF}`,
        requestUrl.origin
    ).toString();
    // Creating a response
    const response: ActionGetResponse = {
        icon: new URL("/icon.jpg", requestUrl.origin).toString(),
        title: 'App Survey',
        description: 'Provide us with feedback and possibly donate some coffee!',
        label: 'Submit Message',
        links: {
            actions: [
            {
                href: `${baseHref}?message={message}&amount={amount}`,
                label: 'Submit',
                parameters: [
                    {
                        name: 'message',
                        label: 'Enter your feedback',
                        required: true
                    },
                    {
                        name: 'amount',
                        label: 'Enter a custom SOL amount'
                    }
                ]
            }]
        }
    }
    return Response.json(response, {
        headers: ACTIONS_CORS_HEADERS
    });
}

export const OPTIONS = GET;

export const POST = async (request: Request) => {
    try {
        const body: ActionPostRequest = await request.json();
        const requestUrl = new URL(request.url);
        const { message, toPubkey, amount } = getFeedbackQueryParams(requestUrl);
        const connection = new Connection(DEFAULT_RPC_NETWORK);
        let account: PublicKey;
        try {
            account = new PublicKey(body.account);
        } catch (err) {
            return new Response(JSON.stringify({ message: 'Invalid Account provided' }), {
                status: 400,
                headers: ACTIONS_CORS_HEADERS,
            });
        }

        const balance = await connection.getBalance(account);
        console.log(amount);
        console.log(LAMPORTS_PER_SOL);
        if (balance / LAMPORTS_PER_SOL < amount) {
            return new Response(JSON.stringify({ message: 'Insufficient balance to cover the amount and fees' }), {
                status: 400,
                headers: ACTIONS_CORS_HEADERS,
            });
        }

        const transaction = new Transaction();
        if (amount !== 0) {
            const minimumBalance = await connection.getMinimumBalanceForRentExemption(0);
            if (amount * LAMPORTS_PER_SOL < minimumBalance) {
                throw `Account may not be rent exempt: ${toPubkey.toBase58()}`;
            }
            transaction.add(
                SystemProgram.transfer({
                    fromPubkey: account,
                    toPubkey: new PublicKey(toPubkey),
                    lamports: amount * LAMPORTS_PER_SOL,
                })
            );
        }
        transaction.feePayer = account;
        transaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;

        const serialTx = transaction
        .serialize({ requireAllSignatures: false, verifySignatures: false })
        .toString("base64");
        const response: ActionPostResponse = {
            transaction: serialTx,
            message: `Thank you for submitting!`,
        };

        // Send Email
        const subject = 'New SOL Donation and Feedback';
        const text = `You have received a new donation and feedback.\n\nMessage: ${message}\nAmount: ${amount} SOL\n\nThis is an autogenerated email to notify you of the submission.`
        sendEmail(subject, text);

        return Response.json(response, {
            headers: ACTIONS_CORS_HEADERS,
        });
    } catch (err) {
        console.log(err);
        let message = "An unknown error occurred";
        if (typeof err == "string") message = err;
        return new Response(message, {
        status: 400,
        headers: ACTIONS_CORS_HEADERS,
        });
    }
}